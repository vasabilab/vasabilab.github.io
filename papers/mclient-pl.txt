/*  This program is a part of vasabilab's educational notes.
    Author: kasidit chanchio   
*/
#include <stdlib.h>
#include <stdio.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <stdint.h>
#include <fcntl.h>

int connect_cr(int fd, const struct sockaddr *addr, socklen_t len);
int write_full(int fd, const void *buf, size_t count);
int read_full(int fd, void *buf, size_t count);

#define		SERV_PORT	7001
#define		SERV_IP_ADDR	"127.0.0.1"

#define 	DATA_LENGTH	4096

// socket structure definitions 
int 	client_fd; 
struct 	sockaddr_in serv_addr;

// data structures for batch sending 
fd_set	rset, wset;
int 	maxfd;

main(int argc, char* argv[]){

	int i, ret;
	uint8_t *p;
	uint32_t res;
	int nrd;

	client_fd = socket(AF_INET, SOCK_STREAM, 0); 

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(SERV_PORT);
	serv_addr.sin_addr.s_addr = inet_addr(SERV_IP_ADDR);

	if((ret = connect_cr(client_fd, (struct sockaddr *) &serv_addr, sizeof(serv_addr))) < 0){
		printf("Error occured errno = %d\n", errno);
		exit(1);
	}
	
	p = malloc(sizeof(uint8_t) * DATA_LENGTH);

	FD_ZERO(&rset);
	FD_ZERO(&wset);

	maxfd = client_fd;
	i = 0; 

	for(;;){

	  if(i < 10){
		i++;
	  }
	  else break;

	  FD_SET(client_fd, &rset);
	  FD_SET(client_fd, &wset);
	 
	  nrd = select(maxfd + 1, &rset, &wset, NULL, NULL);

	  if(FD_ISSET(client_fd, &wset)){
		// fill p with i's value
	  	memset(p, i, sizeof(uint8_t) * DATA_LENGTH); 
	  	write_full(client_fd, p, (sizeof(uint8_t) * DATA_LENGTH)); 
		printf("send p[0]= %d p[1]= %d p[100]= %d\n", (uint8_t)*p, (uint8_t)*(p+1), (uint8_t)*(p+100));
		FD_ZERO(&wset);
	  }
	  if(FD_ISSET(client_fd, &rset)){
	  	//read_full(client_fd, &resp, sizeof(uint32_t)); 
		//printf("Response: %u\n", resp);
		FD_ZERO(&rset);
	  }

	}
	shutdown(client_fd, SHUT_WR);
	
}

int connect_cr(int fd, const struct sockaddr *addr, socklen_t len){
	int ret;
repeat_connect:
        ret = connect(fd, addr, len);
        if (ret < 0) {
            if (errno == EINTR){
                goto repeat_connect;
	    }
	    printf("connect error errno=%d fd=%d\n", errno, fd);
        }
	return ret;

}
// The write_full function below is taken from qemu's code. 
int write_full(int fd, const void *buf, size_t count){
    ssize_t ret = 0;
    ssize_t total = 0;

    while (count) {
        ret = write(fd, buf, count);
        if (ret < 0) {
            if (errno == EINTR){
                continue;
	    }
	    printf("write error errno=%d fd=%d\n", errno, fd);
            break;
        }

        count -= ret;
        buf += ret;
        total += ret;
    }

    return total;
}

int read_full(int fd, void *buf, size_t count){
    ssize_t ret = 0;
    ssize_t total = 0;

    while (count) {
        ret = read(fd, buf, count);
        if (ret < 0) {
            if (errno == EINTR){ 
                continue;
	    } 
	    printf("read error errno=%d fd=%d\n", errno, fd);
            break;
        }

        count -= ret;
        buf += ret;
        total += ret;
    }

    return total;
}
