/*  This program is a part of vasabilab's educational notes.
    Author: kasidit chanchio  
*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <stdint.h>
#include <fcntl.h>

int qemu_write_full(int fd, const void *buf, size_t count);
int qemu_read_full(int fd, const void *buf, size_t count);

#define 	DATA_LENGTH	4096

main(int argc, char* argv[]){

	int fd; 
	uint8_t *p;

	fd = open("/tmp/mytest", O_WRONLY | O_CREAT, 0644); 

	p = malloc(sizeof(uint8_t) * DATA_LENGTH);

	memset(p, 0, sizeof(uint8_t) * DATA_LENGTH); // fill p with 0

	qemu_write_full(fd, p, (sizeof(uint8_t) * DATA_LENGTH)); 

	close(fd);
	
}

// This function is taken from qemu's code. You may write 
// your own using any name you like. 

int qemu_write_full(int fd, const void *buf, size_t count){
    ssize_t ret = 0;
    ssize_t total = 0;

    while (count) {
        ret = write(fd, buf, count);
        if (ret < 0) {
            if (errno == EINTR){
                continue;
	    }
	    printf("write error errno=%d fd=%d\n", errno, fd);
            break;
        }

        count -= ret;
        buf += ret;
        total += ret;
    }

    return total;
}

int qemu_read_full(int fd, const void *buf, size_t count){
    ssize_t ret = 0;
    ssize_t total = 0;

    while (count) {
        ret = read(fd, buf, count);
        if (ret < 0) {
            if (errno == EINTR){ 
                continue;
	    } 
	    printf("read error errno=%d fd=%d\n", errno, fd);
            break;
        }

        count -= ret;
        buf += ret;
        total += ret;
    }

    return total;
}
