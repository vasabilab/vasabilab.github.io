/*
 This is an example C client program using libmemcached to store data 
 on membase server. The data in this program is binary and the connections
 mde to membase servers are TCP. This program is adapted from an example 
 program on MySQL website.

 Author: Kasidit Chanchio
*/

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <libmemcached/memcached.h>

#define  NUM_KEYS	10 	// number of keys used in this example

int main(int argc, char *argv[])
{
  memcached_server_st *servers = NULL;
  memcached_st *memc;
  memcached_return rc;

  uint64_t *keys[NUM_KEYS];
  size_t key_length[NUM_KEYS];

  uint8_t *values[NUM_KEYS];
  size_t value_length[NUM_KEYS];
  unsigned int x;
  uint32_t flags;

  uint64_t return_key;
  size_t return_key_length;

  uint8_t *return_value;
  size_t return_value_length;

  int i, j; 

  const char *config_string= "--BINARY-PROTOCOL --TCP-NODELAY --SOCKET-SEND-SIZE=8092";
  memc= memcached(config_string, strlen(config_string));

  servers= memcached_server_list_append(servers, "localhost", 11211, &rc);
  rc= memcached_server_push(memc, servers);

  if (rc == MEMCACHED_SUCCESS)
    	fprintf(stderr,"Added server successfully\n");
  else
    	fprintf(stderr,"Couldn't add server: %s\n",memcached_strerror(memc, rc));

  for(i = 0; i< 3; i++){
    keys[i] = (uint64_t *) malloc(sizeof(uint64_t));
    key_length[i] = sizeof(uint64_t);
    *keys[i] = (uint64_t) (1000 + i);
    printf(" key = %lu len %d\n", *keys[i], key_length[i]);
    values[i] = (uint8_t *) malloc(sizeof(uint8_t)*4096);
    for (j = 0; j < 4096; j++){
	*(*(values+i)+j) = i; 
    }
    for (j = 0; j < 10; j++){
        printf("v = %u\n", *(values[i]+j)); 
    }
    value_length[i] = sizeof(uint8_t) * 4096;  

    rc= memcached_set(memc, (const char *) keys[i], key_length[i], 
          (const char *) values[i], value_length[i], (time_t)0, (uint32_t)0);
    if (rc == MEMCACHED_SUCCESS)
        fprintf(stderr,"Key %lu stored successfully\n",*keys[i]);
    else
        fprintf(stderr,"Couldn't store key: %s\n",memcached_strerror(memc, rc));
  }

  rc= memcached_mget(memc, (const char * const *) keys, key_length, 3);
  if (rc == MEMCACHED_SUCCESS){
      while ((return_value= (uint8_t *) memcached_fetch(memc, &return_key, &return_key_length,
                                            &return_value_length, &flags, &rc)) != NULL)
        {
          if (rc == MEMCACHED_SUCCESS)
            {
		fprintf(stderr," key %d len %d ret v len %d value: \n", return_key, return_key_length, return_value_length);
		for(i = 0; i < 10; i++){
              		fprintf(stderr," %d ", *(return_value+i));
		}
		fprintf(stderr,"  \n");
            }
        }
  }
  return 0;
}
