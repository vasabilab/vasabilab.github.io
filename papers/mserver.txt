/*  This program is a part of vasabilab's educational notes.
    Author: kasidit chanchio  
*/
#include <stdlib.h>
#include <stdio.h>

#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <stdint.h>
#include <fcntl.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int accept_cr(int fd, struct sockaddr *addr, socklen_t *len);
int write_full(int fd, const void *buf, size_t count);
int read_full(int fd, void *buf, size_t count);

#define		SERV_PORT	7001
#define		SERV_IP_ADDR	"localhost"
#define 	BACKLOG		5

#define 	DATA_LENGTH	4096

// socket structure definitions 
int server_fd;
int conn_fd; 
struct sockaddr_in serv_addr;

main(int argc, char* argv[]){

	int i, ret;
	uint8_t *p;

	server_fd = socket(AF_INET, SOCK_STREAM, 0); 

	memset(&serv_addr, 0, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(SERV_PORT);
	serv_addr.sin_addr.s_addr = INADDR_ANY;

	bind(server_fd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)); 

	listen(server_fd, BACKLOG);

	if((conn_fd = accept_cr(server_fd, NULL, NULL)) < 0){
		printf("Accept: Error occured\n");
		exit(1);
	}
	
	p = malloc(sizeof(uint8_t) * DATA_LENGTH);

	for(i = 0; i < 9; i++){
		read_full(conn_fd, p, (sizeof(uint8_t) * DATA_LENGTH)); 

		printf("check out 0 %d 1 %d 100 %d\n", (uint8_t)*p, (uint8_t)*(p+1), (uint8_t)*(p+100));
	}

	close(conn_fd);
	close(server_fd);
	
}

int accept_cr(int fd, struct sockaddr *addr, socklen_t *len){
	int ret;
repeat_accept:
        ret = accept(fd, addr, len);
        if (ret < 0) {
            if (errno == EINTR){
                goto repeat_accept;
	    }
	    printf("accept error errno=%d fd=%d\n", errno, fd);
        }
	return ret;
}

int write_full(int fd, const void *buf, size_t count){
    ssize_t ret = 0;
    ssize_t total = 0;

    while (count) {
        ret = write(fd, buf, count);
        if (ret < 0) {
            if (errno == EINTR){
                continue;
	    }
	    printf("write error errno=%d fd=%d\n", errno, fd);
            break;
        }

        count -= ret;
        buf += ret;
        total += ret;
    }

    return total;
}

int read_full(int fd, void *buf, size_t count){
    ssize_t ret = 0;
    ssize_t total = 0;

    while (count) {
        ret = read(fd, buf, count);
        if (ret < 0) {
            if (errno == EINTR){ 
                continue;
	    } 
	    printf("read error errno=%d fd=%d\n", errno, fd);
            break;
        }

        count -= ret;
        buf += ret;
        total += ret;
    }

    return total;
}
