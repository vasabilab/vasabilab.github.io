/*  This program is a part of vasabilab's educational notes.
    Author: kasidit chanchio   
            Department of Computer Science,
            Thammasat University, THAILAND 
            kasiditchanchio@gmail.com
*/
#include	<stdio.h>
#include	<stdlib.h>
#include	<stdint.h>
#include	<inttypes.h>
#include	<string.h>

typedef uint64_t ram_addr_t;

#define 	QEMU_VMALLOC_ALIGN 		(512 * 4096)

#define		TLC_NUM_MEMLOCK_PER_1GB		2048
#define 	ONEGIGABYTES			(1024 * 1024 * 1024)
#define 	ONEMEGABYTES			(1024 * 1024)

#define 	TARGET_PAGE_BITS 12
#define 	TARGET_PAGE_SIZE (1 << TARGET_PAGE_BITS)
#define 	TARGET_PAGE_MASK ~(TARGET_PAGE_SIZE - 1)

#define 	BASE_PRIORITY	0


uint8_t		*global_mem = NULL;
uint64_t	global_mem_size = 0;
uint8_t		*priority_array = NULL;
uint64_t	priority_array_size = 0;

uint64_t	num_ram_pages = 0;

pthread_mutex_t *lock_array = NULL;
uint64_t	lock_array_size = 0;

#define LOCK_MEM_TABLE(addr) \
	pthread_mutex_lock(&lock_array[(addr >> TARGET_PAGE_BITS)% lock_array_size])
#define UNLOCK_MEM_TABLE(addr) \
	pthread_mutex_unlock(&lock_array[(addr >> TARGET_PAGE_BITS) % lock_array_size])

// stat 
uint64_t 	num_page_written = 0;
uint64_t 	num_page_skipped = 0;

int mem_service_init(uint64_t mem_table_size);
void *mem_memalign(size_t alignment, size_t size);
void *mem_vmalloc(size_t size);
void mem_service_finish(void);

int mem_service_init(uint64_t mem_table_size){

	int i;
	int ret = 0;

	global_mem = mem_vmalloc((size_t) mem_table_size);
	global_mem_size = mem_table_size;

	priority_array = mem_vmalloc((size_t)(mem_table_size / TARGET_PAGE_SIZE));
	priority_array_size = (global_mem_size / TARGET_PAGE_SIZE) + 1; 

	memset(priority_array, BASE_PRIORITY, priority_array_size);

	lock_array_size = (((int)(mem_table_size / ONEGIGABYTES)) + 1)* TLC_NUM_MEMLOCK_PER_1GB;

	lock_array = (pthread_mutex_t *) malloc(lock_array_size * 
    				sizeof(pthread_mutex_t));

    	for (i = 0; i < lock_array_size; i++)
        	pthread_mutex_init((lock_array+i), NULL);  

	num_page_written = 0;
	num_page_skipped = 0;

	printf(" global_mem_size = %" PRId64 " \n", global_mem_size);
	printf(" priority_array_size = %" PRId64 " \n", priority_array_size);
	printf(" lock_array_size = %" PRId64 " \n", lock_array_size);

	return ret;
}

void *mem_memalign(size_t alignment, size_t size)
{
    void *ptr;
    int ret;
    ret = posix_memalign(&ptr, alignment, size);
    if (ret != 0) {
        printf("Failed to allocate %zu B: %s\n",
                size, strerror(ret));
        abort();
    }
    return ptr;
}

/* alloc shared memory pages */
void *mem_vmalloc(size_t size)
{
    void *ptr;
    size_t align = QEMU_VMALLOC_ALIGN;

    ptr = mem_memalign(align, size);
    return ptr;
}

//void mem_vfree(void *ptr)
//{
//    free(ptr);
//}

int set_data_to_mem_priority(ram_addr_t addr, uint8_t *ptr, uint64_t data_size, int pri){
	int ret;
	uint8_t	*p = global_mem+addr; 
	uint64_t page_id = (addr >> TARGET_PAGE_BITS);
	uint8_t  ori_pri = 0;
	
	printf(" --> set 0x%" PRIx64 " pri = %d\n", addr, pri);

	LOCK_MEM_TABLE(addr);

	ori_pri = priority_array[page_id];
	printf("     pri[0x%" PRIx64 "] = %d lock_id = 0x%" PRIx64 "\n", 
			page_id, (int) ori_pri, (page_id % lock_array_size));
	if(pri >= ori_pri){
		memcpy(p, ptr, data_size);
		if(pri > ori_pri){
			priority_array[page_id] = pri;	
		}
		num_page_written++;
		ret = 1;
	}
	else{
		num_page_skipped++;
		ret = 0;
	}

	UNLOCK_MEM_TABLE(addr);
	
	return ret;
}

uint8_t *get_data_from_mem(ram_addr_t addr, uint64_t data_size){
	uint8_t *ptr;
	uint8_t	*p = global_mem+addr; 

	// TLC: find page in the hash table
	LOCK_MEM_TABLE(addr);

	ptr = (uint8_t *)malloc(sizeof(uint8_t)*(data_size));
	memcpy(ptr, p, data_size);

	UNLOCK_MEM_TABLE(addr);
	
	return ptr;
}

void mem_service_finish(void){
    int i;
    for (i = 0; i < lock_array_size; i++)
        pthread_mutex_destroy((pthread_mutex_t *)(lock_array+i));

    free(lock_array);
    free(priority_array);
}

// Interfaces for operations on memory pages

int put_page_to_mem_priority(ram_addr_t addr, uint8_t *ptr, int pri);
uint8_t *get_page_from_mem(ram_addr_t addr);

int put_page_to_mem_priority(ram_addr_t addr, uint8_t *ptr, int pri){
    return set_data_to_mem_priority(addr, ptr, TARGET_PAGE_SIZE, pri); 
}

uint8_t *get_page_from_mem(ram_addr_t addr){
    uint8_t *ptr;

    ptr = get_data_from_mem(addr, TARGET_PAGE_SIZE); 
    return ptr;
}

